---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Aurora resources for Givesource(R)
Parameters:
  StackName:
    Type: String
  LambdaRole:
    Type: String
  SecureLambdaRole:
    Type: String
  LambdaSecurityGroupId:
    Type: String
  LogDatabaseDebug:
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  AutoPause:
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  DeadLetterQueueTopic:
    Type: String
Resources:
  MaintenanceUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/MaintenanceDatabaseUserSecret
      Description: Givesource database auto-generated maintenance user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${StackName}-maintenance", "database": "${StackName}-database"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  MaintenanceUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MaintenanceUserSecret
      TargetType: AWS::RDS::DBCluster
      TargetId: !ImportValue givesource-rds-cluster-id
  ReadwriteUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/ReadwriteDatabaseUserSecret
      Description: Givesource database auto-generated readwrite user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${StackName}-readwrite", "database": "${StackName}-database"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  ReadwriteUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ReadwriteUserSecret
      TargetType: AWS::RDS::DBCluster
      TargetId: !ImportValue givesource-rds-cluster-id
  SecretsManagerPolicyReadWrite:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: readwrite_user_secret_get
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref ReadwriteUserSecret
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CaParam}
                - CaParam: !ImportValue givesource-rds-ca-parameter
      Roles:
      - !Ref LambdaRole
      - !Ref SecureLambdaRole
  LambdaGlobalAuroraIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: allows access from lambda into aurora
      GroupId: !ImportValue givesource-rds-security-group-serverless
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroupId
  BootstrapDatabaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: secrets_manager
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !ImportValue givesource-rds-admin-user-secret
              - !Ref MaintenanceUserSecret
              - !Ref ReadwriteUserSecret
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CaParam}
                - CaParam: !ImportValue givesource-rds-ca-parameter
      - PolicyName: dead_letter_queue_publish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Ref DeadLetterQueueTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  BootstrapDatabaseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/BootstrapSharedDatabase.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: Database Init
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          ADMIN_SECRET_ARN: !ImportValue givesource-rds-admin-user-secret
          MAINTENANCE_SECRET_ARN: !Ref MaintenanceUserSecret
          READWRITE_SECRET_ARN: !Ref ReadwriteUserSecret
          RDS_CA_PARAMETER: !ImportValue givesource-rds-ca-parameter
      FunctionName: !Sub ${StackName}-BootstrapSharedDatabase
      Handler: index.handle
      MemorySize: 1024
      Role: !GetAtt BootstrapDatabaseLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  BootstrapDatabaseLambdaLambdaInvoker:
    Type: Custom::BootstrapDatabaseLambdaInvoker
    Properties:
      ServiceToken: !GetAtt BootstrapDatabaseLambdaFunction.Arn
    DependsOn:
      - MaintenanceUserSecretAttachment
      - ReadwriteUserSecretAttachment
  MigrateDatabaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: secrets_manager
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref MaintenanceUserSecret
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CaParam}
                - CaParam: !ImportValue givesource-rds-ca-parameter
      - PolicyName: s3_read
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
            - arn:aws:s3:::{{awsReleaseBucket}}
          - Effect: Allow
            Action:
            - s3:GetObject*
            Resource:
            - arn:aws:s3:::{{awsReleaseBucket}}/*
      - PolicyName: dead_letter_queue_publish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Ref DeadLetterQueueTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  MigrateDatabaseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/MigrateSharedDatabase.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: Database Init
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          MAINTENANCE_DATABASE_SECRET_ARN: !Ref MaintenanceUserSecret
          RDS_CA_PARAMETER: !ImportValue givesource-rds-ca-parameter
          MIGRATIONS_BUCKET: {{awsReleaseBucket}}
          MIGRATIONS_LOCATION: migrations/{{version}}
      FunctionName: !Sub ${StackName}-MigrateSharedDatabase
      Handler: index.handle
      MemorySize: 1024
      Role: !GetAtt MigrateDatabaseLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet
  MigrateDatabaseLambdaLambdaInvoker:
    Type: Custom::MigrateDatabaseLambdaInvoker
    Properties:
      ServiceToken: !GetAtt MigrateDatabaseLambdaFunction.Arn
    DependsOn: BootstrapDatabaseLambdaLambdaInvoker
