---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Aurora resources for Givesource(R)
Parameters:
  DatabaseAdminUser:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: admin
  DatabaseMaintenanceUser:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database maintenance account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: maintenance
  DatabaseReadwriteUser:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database readwrite account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: readwrite
  DatabaseReadonlyUser:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database readonly account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: readonly
  DatabaseName:
    Type: String
    Default: givesource
  StackName:
    Type: String
  LambdaRole:
    Type: String
  SecureLambdaRole:
    Type: String
  LambdaSecurityGroupId:
    Type: String
  LogDatabaseDebug:
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  AutoPause:
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  DeadLetterQueueTopic:
    Type: String
Conditions:
  ShouldLogDatabaseDebug: !Equals [!Ref LogDatabaseDebug, 'true']
Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress/egress rules for aurora
      VpcId: !ImportValue givesource-vpc
      SecurityGroupIngress: []
      SecurityGroupEgress: []
      Tags:
        - Key: Name
          Value: givesource-aurora
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !ImportValue givsource-primary-private-subnet
        - !ImportValue givesource-secondary-private-subnet
  AdminUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/AdminUserSecret
      Description: Givesource database auto-generated admin user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseAdminUser}", "database": "${DatabaseName}"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  AdminUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AdminUserSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  MaintenanceUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/MaintenanceUserSecret
      Description: Givesource database auto-generated maintenance user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseMaintenanceUser}", "database": "${DatabaseName}"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  MaintenanceUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MaintenanceUserSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  ReadwriteUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/ReadwriteUserSecret
      Description: Givesource database auto-generated readwrite user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseReadwriteUser}", "database": "${DatabaseName}"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  ReadwriteUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ReadwriteUserSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  SecretsManagerPolicyReadWrite:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: readwrite_user_secret_get
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref ReadwriteUserSecret
      Roles:
      - !Ref LambdaRole
      - !Ref SecureLambdaRole
  ReadonlyUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackName}/ReadonlyUserSecret
      Description: Givesource database auto-generated readonly user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseReadonlyUser}", "database": "${DatabaseName}"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
  ReadonlyUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ReadonlyUserSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  SecretsManagerPolicyReadOnly:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: readonly_user_secret_get
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref ReadonlyUserSecret
      Roles:
      - !Ref LambdaRole
      - !Ref SecureLambdaRole
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Parameter group for RDS
      Family: aurora-mysql5.7
      Parameters:
        general_log: !If [ShouldLogDatabaseDebug, 1, 0]
        slow_query_log: 1
        log_queries_not_using_indexes: !If [ShouldLogDatabaseDebug, 1, 0]
        log_warnings: !If [ShouldLogDatabaseDebug, 1, 0]
        server_audit_logging: !If [ShouldLogDatabaseDebug, 1, 0]
        server_audit_logs_upload: !If [ShouldLogDatabaseDebug, 1, 0]
        server_audit_events: !If [ShouldLogDatabaseDebug, 'CONNECT,QUERY,QUERY_DCL,QUERY_DDL,QUERY_DML,TABLE', !Ref AWS::NoValue]
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 30
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-mysql
      EngineMode: serverless
      EngineVersion: 5.7.mysql_aurora.2.07.1
      EnableHttpEndpoint: true
{{=<% %>=}}
      MasterUsername: !Sub '{{resolve:secretsmanager:${AdminUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${AdminUserSecret}:SecretString:password}}'
<%={{ }}=%>
      ScalingConfiguration:
        AutoPause: !Ref AutoPause
        MaxCapacity: 16
        MinCapacity: 1
        SecondsUntilAutoPause: 1800
      VpcSecurityGroupIds:
        - !GetAtt DBSecurityGroup.GroupId
    DependsOn: AdminUserSecret
  LambdaAuroraIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: allows access from lambda into aurora
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroupId
  BootstrapDatabaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: secrets-manager
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref AdminUserSecret
              - !Ref MaintenanceUserSecret
              - !Ref ReadwriteUserSecret
              - !Ref ReadonlyUserSecret
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  BootstrapDatabaseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/BootstrapDatabase.zip
      Description: Database Init
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          DATABASE_HOST: !GetAtt RDSCluster.Endpoint.Address
          ADMIN_DATABASE_SECRET_ID: !Sub ${StackName}/AdminUserSecret
          MAINTENANCE_DATABASE_SECRET_ID: !Sub ${StackName}/MaintenanceUserSecret
          READWRITE_DATABASE_SECRET_ID: !Sub ${StackName}/ReadwriteUserSecret
          READONLY_DATABASE_SECRET_ID: !Sub ${StackName}/ReadonlyUserSecret
          DATABASE_NAME: !Ref DatabaseName
      FunctionName: !Sub ${StackName}-BootstrapDatabase
      Handler: index.handle
      MemorySize: 1024
      Role: !GetAtt BootstrapDatabaseLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givsource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet
  BootstrapDatabaseLambdaLambdaInvoker:
    Type: Custom::BootstrapDatabaseLambdaInvoker
    Properties:
      ServiceToken: !GetAtt BootstrapDatabaseLambdaFunction.Arn
    DependsOn:
      - AdminUserSecretAttachment
      - MaintenanceUserSecretAttachment
      - ReadwriteUserSecretAttachment
      - ReadonlyUserSecretAttachment
  MigrateDatabaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: secrets-manager
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref MaintenanceUserSecret
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
            - arn:aws:s3:::{{awsReleaseBucket}}
          - Effect: Allow
            Action:
            - s3:GetObject*
            Resource:
            - arn:aws:s3:::{{awsReleaseBucket}}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  MigrateDatabaseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/MigrateDatabase.zip
      Description: Database Init
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          DATABASE_HOST: !GetAtt RDSCluster.Endpoint.Address
          MAINTENANCE_DATABASE_SECRET_ID: !Sub ${StackName}/MaintenanceUserSecret
          DATABASE_NAME: !Ref DatabaseName
          MIGRATIONS_BUCKET: {{awsReleaseBucket}}
          MIGRATIONS_LOCATION: migrations/{{version}}
      FunctionName: !Sub ${StackName}-MigrateDatabase
      Handler: index.handle
      MemorySize: 1024
      Role: !GetAtt MigrateDatabaseLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givsource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet
  MigrateDatabaseLambdaLambdaInvoker:
    Type: Custom::MigrateDatabaseLambdaInvoker
    Properties:
      ServiceToken: !GetAtt MigrateDatabaseLambdaFunction.Arn
    DependsOn: BootstrapDatabaseLambdaLambdaInvoker
Outputs:
  Identifier:
    Value: !Ref RDSCluster
