---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS S3 resources for Givesource(R)
Parameters:

  AdminPagesCNAMEs:
    Type: CommaDelimitedList

  AdminPagesSSLCertificateArn:
    Type: String

  PublicPagesCNAMEs:
    Type: CommaDelimitedList

  PublicPagesSSLCertificateArn:
    Type: String

Conditions:

  HasAdminPagesCNAMEs: !Not [!Equals ["", !Join ["", !Ref AdminPagesCNAMEs ] ] ]

  HasAdminPagesSSLCertificateArn: !Not [!Equals ["", !Ref AdminPagesSSLCertificateArn]]

  HasPublicPagesCNAMEs: !Not [!Equals ["", !Join ["", !Ref PublicPagesCNAMEs ] ] ]

  HasPublicPagesSSLCertificateArn: !Not [!Equals ["", !Ref PublicPagesSSLCertificateArn]]

Resources:

  # AWS S3 Resources

  AdminPagesS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html

  AdminPagesS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminPagesS3
      PolicyDocument:
        Statement:
        - Sid: allow-ssl-requests-only
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub arn:aws:s3:::${AdminPagesS3}/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: allow-cloudfront-access
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          Action: s3:Get*
          Resource: !Sub arn:aws:s3:::${AdminPagesS3}/*

  PublicPagesS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html

  PublicPagesS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicPagesS3
      PolicyDocument:
        Statement:
        - Sid: allow-ssl-requests-only
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub arn:aws:s3:::${PublicPagesS3}/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: allow-cloudfront-access
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          Action: s3:Get*
          Resource: !Sub arn:aws:s3:::${PublicPagesS3}/*

  UploadsS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            MaxAge: 3600
      WebsiteConfiguration:
        IndexDocument: index.html

  UploadsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UploadsS3
      PolicyDocument:
        Statement:
        - Sid: allow-ssl-requests-only
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub arn:aws:s3:::${UploadsS3}/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: allow-cloudfront-access
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          Action: s3:Get*
          Resource: !Sub arn:aws:s3:::${UploadsS3}/*

  Reports:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !ImportValue AccessLoggingBucket
        LogFilePrefix: !Sub reports-${AWS::StackName}/

  ReportsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Reports
      PolicyDocument:
        Statement:
        - Sid: allow-ssl-requests-only
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource: !Sub arn:aws:s3:::${Reports}/*
          Condition:
            Bool:
              aws:SecureTransport: false

  GivesourceCache:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
      WebsiteConfiguration:
        IndexDocument: index.html

  GivesourceCacheBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GivesourceCache
      PolicyDocument:
        Statement:
        - Sid: allow-ssl-requests-only
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub arn:aws:s3:::${GivesourceCache}/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: allow-cloudfront-access
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
          Action: s3:Get*
          Resource: !Sub arn:aws:s3:::${GivesourceCache}/*

  # AWS CloudFront Resources

  AdminPagesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [HasAdminPagesCNAMEs, !Ref AdminPagesCNAMEs, !Ref "AWS::NoValue"]
        Origins:
          - DomainName: !GetAtt AdminPagesS3.DomainName
            Id: !Ref AdminPagesS3
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOAI]]
        Enabled: true
        Comment: Distribution for Givesource admin pages S3 bucket
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: !Ref AdminPagesS3
          MaxTTL: 86400
          MinTTL: 0
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !ImportValue global-short-lived-caching-header-policy
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: !If [HasAdminPagesSSLCertificateArn, !Ref AdminPagesSSLCertificateArn, !Ref "AWS::NoValue"]
          CloudFrontDefaultCertificate: !If [HasAdminPagesSSLCertificateArn, !Ref "AWS::NoValue", true]
          MinimumProtocolVersion: !If [HasAdminPagesSSLCertificateArn, "TLSv1.1_2016", !Ref "AWS::NoValue"]
          SslSupportMethod: !If [HasAdminPagesSSLCertificateArn, "sni-only", !Ref "AWS::NoValue"]
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
    DependsOn: AdminPagesS3

  PublicPagesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [HasPublicPagesCNAMEs, !Ref PublicPagesCNAMEs, !Ref "AWS::NoValue"]
        Origins:
        - Id: !Ref PublicPagesS3
          DomainName: !GetAtt PublicPagesS3.DomainName
          S3OriginConfig:
            OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOAI]]
        Enabled: true
        Comment: Distribution for Givesource(R) public pages S3 bucket
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
              - User-Agent
          TargetOriginId: !Ref PublicPagesS3
          MaxTTL: 86400
          MinTTL: 0
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !ImportValue global-short-lived-caching-header-policy
        CacheBehaviors:
          - PathPattern: assets/*
            DefaultTTL: 31536000 # 365 days
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: !Ref PublicPagesS3
            ResponseHeadersPolicyId: !ImportValue global-long-lived-caching-header-policy
            ForwardedValues:
              QueryString: false
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: !If [HasPublicPagesSSLCertificateArn, !Ref PublicPagesSSLCertificateArn, !Ref "AWS::NoValue"]
          CloudFrontDefaultCertificate: !If [HasPublicPagesSSLCertificateArn, !Ref "AWS::NoValue", true]
          MinimumProtocolVersion: !If [HasPublicPagesSSLCertificateArn, "TLSv1.1_2016", !Ref "AWS::NoValue"]
          SslSupportMethod: !If [HasPublicPagesSSLCertificateArn, "sni-only", !Ref "AWS::NoValue"]
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
    DependsOn: PublicPagesS3

  UploadsDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt UploadsS3.DomainName
          Id: !Ref UploadsS3
          S3OriginConfig:
            OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOAI]]
        Enabled: true
        Comment: Distribution for Givesource(R) uploads S3 bucket
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: !Ref UploadsS3
          DefaultTTL: 600
          MaxTTL: 86400
          MinTTL: 0
          Compress: true
          ResponseHeadersPolicyId: !ImportValue global-medium-caching-header-policy
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
    DependsOn: UploadsS3

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref UploadsS3

  CachingDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt GivesourceCache.DomainName
          Id: !Ref GivesourceCache
          S3OriginConfig:
            OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOAI]]
        Enabled: true
        Comment: Distribution for Givesource(R) caching S3 bucket
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: !Ref GivesourceCache
          MaxTTL: 86400
          MinTTL: 0
          Compress: true
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
    DependsOn: GivesourceCache


Outputs:

  AdminPagesCloudFrontDistribution:
    Value: !Ref AdminPagesDistribution

  AdminPagesCloudFrontDomainName:
    Value: !GetAtt AdminPagesDistribution.DomainName

  AdminPagesCloudFrontUrl:
    Value: !Sub |-
      https://${AdminPagesDistribution.DomainName}

  AdminPagesS3:
    Value: !Ref AdminPagesS3

  AdminPagesS3BucketUrl:
    Value: !GetAtt AdminPagesS3.WebsiteURL

  PublicPagesCloudFrontDistribution:
    Value: !Ref PublicPagesDistribution

  PublicPagesCloudFrontDomainName:
    Value: !GetAtt PublicPagesDistribution.DomainName

  PublicPagesCloudFrontUrl:
    Value: !Sub |-
      https://${PublicPagesDistribution.DomainName}

  PublicPagesS3:
    Value: !Ref PublicPagesS3

  PublicPagesS3BucketUrl:
    Value: !GetAtt PublicPagesS3.WebsiteURL

  UploadsCloudFrontDistribution:
    Value: !Ref UploadsDistribution

  UploadsCloudFrontDomainName:
    Value: !GetAtt UploadsDistribution.DomainName

  UploadsCloudFrontUrl:
    Value: !Sub |-
      https://${UploadsDistribution.DomainName}

  UploadsS3:
    Value: !Ref UploadsS3

  UploadsS3BucketUrl:
    Value: !GetAtt UploadsS3.WebsiteURL

  CachingCloudFrontDistribution:
    Value: !Ref CachingDistribution

  CachingCloudFrontDomainName:
    Value: !GetAtt CachingDistribution.DomainName

  CachingCloudFrontUrl:
    Value: !Sub |-
      https://${CachingDistribution.DomainName}

  GivesourceCache:
    Value: !Ref GivesourceCache

  GivesourceCacheBucketUrl:
    Value: !GetAtt GivesourceCache.WebsiteURL

  Reports:
    Value: !Ref Reports

  ReportsBucketUrl:
    Value: !GetAtt Reports.WebsiteURL
