---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Custom resources for Givesource
Parameters:

  StackName:
    Type: String

  RestApi:
    Type: String

  LambdaRoleArn:
    Type: String

  DefaultLambdaFunctionTimeout:
    Type: Number

  CognitoSnsCallerRoleArn:
    Type: String

  S3HandleFunctionRoleArn:
    Type: String

  AdminPagesS3:
    Type: String

  AdminPagesCloudFrontUrl:
    Type: String

  PublicPagesS3:
    Type: String

  PublicPagesCloudFrontUrl:
    Type: String

  UploadsS3:
    Type: String

  UploadsCloudFrontUrl:
    Type: String

Resources:

  # Api Gateway Authorizer Lambda Resources

  AuthorizeSuperAdminUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeSuperAdminUsers.zip
      Description: 'Cognito super admin user api gateway authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeSuperAdminUsers
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoUserPool

  AuthorizeSuperAdminUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeSuperAdminUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeSuperAdminUsers
    DependsOn:
      - AuthorizeSuperAdminUsersLambdaFunction
      - AuthorizeSuperAdminUsers

  AuthorizeAdminUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeAdminUsers.zip
      Description: 'Cognito admin user api gateway authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeAdminUsers
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoUserPool

  AuthorizeAdminUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeAdminUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeAdminUsers
    DependsOn:
      - AuthorizeAdminUsersLambdaFunction
      - AuthorizeAdminUsers

  AuthorizeNonprofitUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeNonprofitUsers.zip
      Description: 'Cognito admin user api gateway authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeNonprofitUsers
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoUserPool

  AuthorizeNonprofitUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeNonprofitUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeNonprofitUsers
    DependsOn:
      - AuthorizeNonprofitUsersLambdaFunction
      - AuthorizeNonprofitUsers

  AuthorizeNonprofitResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeNonprofitResource.zip
      Description: 'Cognito admin user api gateway authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeNonprofitResource
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoUserPool

  AuthorizeNonprofitResourceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeNonprofitResourceLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeNonprofitResource
    DependsOn:
      - AuthorizeNonprofitResourceLambdaFunction
      - AuthorizeNonprofitResource

  # Api Gateway Authorizers

  AuthorizeSuperAdminUsers:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeSuperAdminUsersLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeSuperAdminUsers
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeSuperAdminUsersLambdaFunction

  AuthorizeAdminUsers:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeAdminUsersLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeAdminUsers
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeAdminUsersLambdaFunction

  AuthorizeNonprofitUsers:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeNonprofitUsersLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeNonprofitUsers
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeNonprofitUsersLambdaFunction

  AuthorizeNonprofitResource:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeNonprofitResourceLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeNonprofitResource
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeNonprofitResourceLambdaFunction

  # Cognito User Pools

  CognitoCreateUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPool.zip
      Description: "Create a user pool"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPool
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCreateUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPoolClient.zip
      Description: "Create a user pool client"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPoolClient
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUser.zip
      Description: "Create a user"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUser
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCreateUserGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserGroup.zip
      Description: "Create a user group"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserGroup
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  SaveSettingsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SaveSettings.zip
      Description: "Create a user pool"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SaveSettings
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3PutObject.zip
      Description: "Put an object into an AWS S3 bucket"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3PutObject
      Handler: "index.handle"
      Role: !Ref S3HandleFunctionRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3SyncObjects.zip
      Description: "Sync S3 objects between two AWS S3 buckets"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3SyncObjects
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  AdminPagesSettingsJson:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket: !Ref AdminPagesS3
      Key: "settings.json"
      Body: !Sub |-
        {
          "API_URL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
        }
    DependsOn:
      - S3PutObjectFunction
      - CognitoUserPool
      - CognitoUserPoolClient

  AdminPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: admin-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref AdminPagesS3
    DependsOn: S3SyncObjectsFunction

  PublicPagesSettingsJson:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket: !Ref PublicPagesS3
      Key: "settings.json"
      Body: !Sub |-
        {
          "API_URL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
        }
    DependsOn:
      - S3PutObjectFunction
      - CognitoUserPool
      - CognitoUserPoolClient

  PublicPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: public-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref PublicPagesS3
    DependsOn: S3SyncObjectsFunction

  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      PoolName: !Sub |-
        ${StackName}-Users
      AdminPagesUrl: !Ref AdminPagesCloudFrontUrl
      SnsCallerArn: !Ref CognitoSnsCallerRoleArn
    DependsOn: CognitoCreateUserPoolFunction

  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolClientFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      ClientName: "Browser"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
    DependsOn:
     - CognitoUserPool
     - CognitoCreateUserPoolClientFunction

  CognitoSuperAdminUserGroup:
    Type: Custom::CognitoSuperAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "SuperAdmin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoAdminUserGroup:
    Type: Custom::CognitoAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Admin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoNonprofitUserGroup:
    Type: Custom::CognitoNonprofitUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Nonprofit"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  SaveInitialStackSettings:
    Type: Custom::Settings
    Properties:
      ServiceToken: !GetAtt SaveSettingsLambdaFunction.Arn
      Settings: !Sub |-
        {
          "API_URL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/",
          "ADMIN_PAGES_CLOUDFRONT_URL": "${AdminPagesCloudFrontUrl}",
          "ADMIN_PAGES_S3_BUCKET_NAME": "${AdminPagesS3}",
          "PUBLIC_PAGES_CLOUDFRONT_URL": "${PublicPagesCloudFrontUrl}",
          "PUBLIC_PAGES_S3_BUCKET_NAME": "${PublicPagesS3}",
          "UPLOADS_CLOUDFRONT_URL": "${UploadsCloudFrontUrl}",
          "UPLOADS_S3_BUCKET_NAME": "${UploadsS3}",
          "USER_POOL_CLIENT_ID": "${CognitoUserPoolClient.UserPoolClientId}",
          "USER_POOL_ID": "${CognitoUserPool.UserPoolId}"
        }
    DependsOn:
      - CognitoUserPool
      - CognitoUserPoolClient

Outputs:

  AuthorizeSuperAdminUsers:
    Value: !Ref AuthorizeSuperAdminUsers

  AuthorizeAdminUsers:
    Value: !Ref AuthorizeAdminUsers

  AuthorizeNonprofitUsers:
    Value: !Ref AuthorizeNonprofitUsers

  AuthorizeNonprofitResource:
    Value: !Ref AuthorizeNonprofitResource

  CognitoCreateUserFunctionArn:
    Value: !GetAtt CognitoCreateUserFunction.Arn

  CognitoUserPoolId:
    Value: !GetAtt CognitoUserPool.UserPoolId

  CognitoUserPoolClientId:
    Value: !GetAtt CognitoUserPoolClient.UserPoolClientId