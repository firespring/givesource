---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Custom resources for Givesource(R)
Parameters:

  StackName:
    Type: String

  ApiDistributionId:
    Type: String

  ApiDistributionUrl:
    Type: String

  RestApi:
    Type: String

  LambdaRoleArn:
    Type: String

  SecureLambdaRole:
    Type: String

  LambdaSecurityGroupId:
    Type: String

  LambdaDefaultRuntime:
    Type: String

  DefaultLambdaFunctionTimeout:
    Type: Number

  CognitoSnsCallerRoleArn:
    Type: String

  AdminPagesS3:
    Type: String

  AdminPagesCloudFrontDistribution:
    Type: String

  AdminPagesCloudFrontUrl:
    Type: String

  PublicPagesS3:
    Type: String

  PublicPagesCloudFrontDistribution:
    Type: String

  PublicPagesCloudFrontUrl:
    Type: String

  UploadsCloudFrontDistribution:
    Type: String

  UploadsS3:
    Type: String

  ReportsS3:
    Type: String

  UploadsCloudFrontUrl:
    Type: String

  GivesourceCache:
    Type: String

  CachingCloudFrontUrl:
    Type: String

  DeadLetterQueueTopic:
    Type: String

Resources:

  # Api Gateway Lambda Resources

  AuthorizeUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeUsers.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: 'Cognito user authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeUsers
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet
    DependsOn: CognitoUserPool

  AuthorizeUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeUsers
    DependsOn:
      - AuthorizeUsersLambdaFunction
      - AuthorizeUsers

  # Create Lambda Invalidation Function

  ApiDistributionInvalidationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/ApiDistributionInvalidation.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Invalidate cloudfront cache for API Distribution for certain path(s)"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          DISTRIBUTION_ID: !Ref ApiDistributionId
      FunctionName: !Sub |-
        ${StackName}-ApiDistributionInvalidation
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout

  ApiGatewayFlushCacheLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/ApiGatewayFlushCache.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Flush API Gateway Cache"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          REST_API_ID: !Ref RestApi
      FunctionName: !Sub |-
        ${StackName}-ApiGatewayFlushCache
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Api Gateway Authorizers

  AuthorizeUsers:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeUsersLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeUsers
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeUsersLambdaFunction

  # CloudWatch Event Rules

  HourlyScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub |-
        ${StackName}-HourlyScheduledEvent
      Description: Event scheduled once an hour
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt DeleteReportsLambdaFunction.Arn
          Id: DeleteReportsScheduledJob
    DependsOn:
      - DeleteReportsLambdaFunction

  # Cognito User Pool Lambda Resources

  CognitoCreateUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPool.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create a user pool"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          COGNITO_CUSTOM_MESSAGE_FUNCTION_ARN: !GetAtt CognitoCustomMessageFunction.Arn
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPool
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet
    DependsOn: CognitoCustomMessageFunction

  CognitoCreateUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPoolClient.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create a user pool client"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPoolClient
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  CognitoCreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUser.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create a user"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUser
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  CognitoCreateUserGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserGroup.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create a user group"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserGroup
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  CognitoCustomMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCustomMessage.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Custom user verification message"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          ADMIN_PAGES_CLOUD_FRONT_URL: !Ref AdminPagesCloudFrontUrl
          EVENT_URL: !Ref PublicPagesCloudFrontUrl
          UPLOADS_CLOUD_FRONT_URL: !Ref UploadsCloudFrontUrl
      FunctionName: !Sub |-
        ${StackName}-CognitoCustomMessage
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  CognitoCustomMessageLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoCustomMessageFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool.UserPoolId}
    DependsOn:
      - CognitoUserPool
      - CognitoCustomMessageFunction

  # Cognito User Pool Custom Resources

  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      PoolName: !Sub |-
        ${StackName}-Users
      SnsCallerArn: !Ref CognitoSnsCallerRoleArn
    DependsOn: CognitoCreateUserPoolFunction

  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolClientFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      ClientName: "Browser"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
    DependsOn:
     - CognitoUserPool
     - CognitoCreateUserPoolClientFunction

  CognitoSuperAdminUserGroup:
    Type: Custom::CognitoSuperAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "SuperAdmin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoAdminUserGroup:
    Type: Custom::CognitoAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Admin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoNonprofitUserGroup:
    Type: Custom::CognitoNonprofitUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Nonprofit"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  # Generate Custom CSS for Frontend

  GenerateCustomFrontendCssLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateCustomFrontendCss.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Generate custom css for the frontend"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          PUBLIC_PAGES_S3_BUCKET: !Ref PublicPagesS3
      FunctionName: !Sub |-
        ${StackName}-GenerateCustomFrontendCss
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  # Generate dynamic content

  GenerateDynamicContentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateDynamicContent.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Generate dynamic content for the public website"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          PUBLIC_PAGES_S3_BUCKET: !Ref PublicPagesS3
      FunctionName: !Sub |-
        ${StackName}-GenerateDynamicContent
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn:
      - GenerateCustomFrontendCssLambdaFunction

  # Lambda@Edge Function Resources

  CreateLambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*
      - PolicyName: CloudFront
        PolicyDocument:
          Statement:
            - Action:
              - cloudfront:CreateDistribution
              - cloudfront:GetDistributionConfig
              - cloudfront:UpdateDistribution
              Effect: Allow
              Resource: '*'
      - PolicyName: IAM
        PolicyDocument:
          Statement:
            - Action:
              - iam:CreateServiceLinkedRole
              - iam:GetRole
              - iam:PassRole
              Effect: Allow
              Resource: '*'
      - PolicyName: Lambda
        PolicyDocument:
          Statement:
            - Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:EnableReplication
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:PublishVersion
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              Effect: Allow
              Resource: !Sub |-
                arn:aws:lambda:us-east-1:${AWS::AccountId}:function:*
      - PolicyName: S3
        PolicyDocument:
          Statement:
            - Action:
              - s3:GetObject
              Effect: Allow
              Resource: !Sub |-
                arn:aws:s3:::{{awsLambdaReleaseBucketPrefix}}-${AWS::Region}/*
      - PolicyName: dead_letter_queue_publish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Ref DeadLetterQueueTopic

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*

  CreateLambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CreateLambdaEdgeFunction.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create an AWS Lambda@Edge function"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CreateLambdaEdgeFunction
      Handler: "index.handle"
      MemorySize: 512
      Role: !GetAtt CreateLambdaEdgeFunctionRole.Arn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CreateLambdaEdgeFunctionRole

  AssociateLambdaEdgeFunctions:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AssociateLambdaEdgeFunctions.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Associate AWS Lambda@Edge functions with a CloudFront Distribution"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-AssociateLambdaEdgeFunctions
      Handler: "index.handle"
      MemorySize: 512
      Role: !GetAtt CreateLambdaEdgeFunctionRole.Arn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CreateLambdaEdgeFunctionRole

  # Create SSM Parameter Resource

  CreateParameterLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CreateParameter.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Create SSM Parameter"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CreateParameter
      Handler: "index.handle"
      MemorySize: 256
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Report Lambda Resources

  GenerateReportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateReport.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Generate report"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          AWS_S3_BUCKET_NAME: !Ref ReportsS3
      FunctionName: !Sub |-
        ${StackName}-GenerateReport
      Handler: "index.handle"
      MemorySize: 2048
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  DeleteReportsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/DeleteReports.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Delete expired reports"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          AWS_S3_BUCKET_NAME: !Ref UploadsS3
      FunctionName: !Sub |-
        ${StackName}-DeleteReports
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  DeleteReportsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeleteReportsLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt HourlyScheduledEventRule.Arn
    DependsOn:
      - DeleteReportsLambdaFunction
      - HourlyScheduledEventRule

  # Save Settings Lambda Resources

  SaveSettingsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SaveSettings.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Save stack settings"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SaveSettings
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  # S3 Lambda Resources

  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3PutObject.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Put an object into an AWS S3 bucket"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3PutObject
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout

  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3SyncObjects.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Sync S3 objects between two AWS S3 buckets"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3SyncObjects
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Create Lambda@Edge Functions

  GeneratePublicPagesHtml:
    Type: Custom::LambdaEdgeSocialShare
    Properties:
      # Properties.Nonce isn't actually utilized by CreateLambdaEdgeFunction
      # but is required to force a deploy update when GeneratePublicPagesHtml lambda code is updated
      Nonce: {{lambdaEdgeGenPubPagesHash}}
      # Properties.CreateLambdaEdgeFunctionRole isn't actually utilized by CreateLambdaEdgeFunction
      # but is required to ensure cloudformation updates to CreateLambdaEdgeFunctionRole happen first
      CreateLambdaEdgeFunctionRole: !GetAtt CreateLambdaEdgeFunctionRole.Arn
      ServiceToken: !GetAtt CreateLambdaEdgeFunction.Arn
      S3Bucket: !Sub |-
        {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
      S3Key: fn/{{version}}/GeneratePublicPagesHtml.zip
      S3Region: !Sub |-
        ${AWS::Region}
      FunctionName: GeneratePublicPagesHtml
      StackName: !Ref StackName
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
    DependsOn:
      - CreateLambdaEdgeFunction
      - LambdaEdgeRole

  GeneratePublicPagesHtmlConfigParameter:
    Type: Custom::CreateParameter
    Properties:
      ServiceToken: !GetAtt CreateParameterLambdaFunction.Arn
      Name: !Sub |-
        /${StackName}-GeneratePublicPagesHtml/config
      Region: us-east-1
      Type: String
      Value: !Sub |-
        {
          "AWS_STACK_REGION": "${AWS::Region}",
          "AWS_STACK_NAME": "${StackName}",
          "AWS_S3_BUCKET_NAME": "${GivesourceCache}"
        }
    DependsOn:
      - CreateParameterLambdaFunction

  GeneratePublicPagesHtmlVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: GeneratePublicPagesHtml
    DependsOn:
      - GeneratePublicPagesHtml

  # Associate Lambda@Edge Functions

  AssociatePublicPagesFunctions:
    Type: Custom::AssociateLambdaEdgeFunctions
    Properties:
      ServiceToken: !GetAtt AssociateLambdaEdgeFunctions.Arn
      CloudFrontDistribution: !Ref PublicPagesCloudFrontDistribution
      Functions: !Sub |-
        {
          "functions": [
            {
              "arn": "${GeneratePublicPagesHtmlVersion}",
              "type": "origin-request"
            }
          ]
        }
    DependsOn:
      - GeneratePublicPagesHtmlVersion

  # S3 Admin Pages Deployment

  AdminPagesSettingsJson:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket: !Ref AdminPagesS3
      Key: "settings.json"
      Body: !Sub |-
        {
          "API_URL": "${ApiDistributionUrl}"
        }
    DependsOn:
      - S3PutObjectFunction
      - CognitoUserPool
      - CognitoUserPoolClient

  AdminPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: admin-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref AdminPagesS3
    DependsOn: S3SyncObjectsFunction

  # S3 Public Pages Deployment

  PublicPagesPagesSettingsJson:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket: !Ref PublicPagesS3
      Key: "settings.json"
      Body: !Sub |-
        {
          "API_URL": "${ApiDistributionUrl}"
        }
    DependsOn:
      - S3PutObjectFunction
      - CognitoUserPool
      - CognitoUserPoolClient

  PublicPagesDynamicContentDeploy:
    Type: Custom::DynamicContent
    Properties:
      ServiceToken: !GetAtt GenerateDynamicContentLambdaFunction.Arn
    DependsOn:
      - GenerateDynamicContentLambdaFunction
      - CognitoUserPool
      - CognitoUserPoolClient
      - SaveInitialStackSettings

  PublicPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: public-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref PublicPagesS3
    DependsOn: S3SyncObjectsFunction

  # Save Settings Custom Resources

  SaveInitialStackSettings:
    Type: Custom::Settings
    Properties:
      ServiceToken: !GetAtt SaveSettingsLambdaFunction.Arn
      Settings: !Sub |-
        {
          "API_URL": "${ApiDistributionUrl}",
          "ADMIN_URL": "${AdminPagesCloudFrontUrl}",
          "ADMIN_PAGES_CLOUD_FRONT_URL": "${AdminPagesCloudFrontUrl}",
          "ADMIN_PAGES_S3_BUCKET_NAME": "${AdminPagesS3}",
          "EVENT_URL": "${PublicPagesCloudFrontUrl}",
          "PUBLIC_PAGES_CLOUD_FRONT_URL": "${PublicPagesCloudFrontUrl}",
          "PUBLIC_PAGES_S3_BUCKET_NAME": "${PublicPagesS3}",
          "UPLOADS_CLOUD_FRONT_URL": "${UploadsCloudFrontUrl}",
          "UPLOADS_S3_BUCKET_NAME": "${UploadsS3}",
          "CACHE_CLOUD_FRONT_URL": "${CachingCloudFrontUrl}",
          "CACHE_S3_BUCKET_NAME": "${GivesourceCache}",
          "REPORTS_S3_BUCKET_NAME": "${ReportsS3}",
          "USER_POOL_CLIENT_ID": "${CognitoUserPoolClient.UserPoolClientId}",
          "USER_POOL_ID": "${CognitoUserPool.UserPoolId}"
        }
    DependsOn:
      - CognitoUserPool
      - CognitoUserPoolClient
      - SaveSettingsLambdaFunction

  # Send Email Lambda Resources

  GenerateDonationsReceiptLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateDonationsReceipt.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Generate a donations receipt"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-GenerateDonationsReceipt
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  SendDonationNotificationEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendDonationNotificationEmail.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Send a donation notification email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendDonationNotificationEmail
      Handler: "index.handle"
      MemorySize: 1024
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  SendDonationsReceiptEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendDonationsReceiptEmail.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Send a donations receipt email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendDonationsReceiptEmail
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  SendContactMessageEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendContactMessageEmail.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Send a contact message email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendContactMessageEmail
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  SendRegistrationPendingEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendRegistrationPendingEmail.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Send a registration pending email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendRegistrationPendingEmail
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  # Metrics lambda functions

  MetricAddAmountLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/MetricAddAmount.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Add an amount to a metric"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-MetricAddAmount
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

  MetricMaxAmountLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/MetricMaxAmount.zip
      DeadLetterConfig:
        TargetArn: !Ref DeadLetterQueueTopic
      Description: "Determine if amount is new max and save if it is"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-MetricMaxAmount
      Handler: "index.handle"
      MemorySize: 512
      Role: !Ref LambdaRoleArn
      Runtime: !Ref LambdaDefaultRuntime
      Timeout: !Ref DefaultLambdaFunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
        SubnetIds:
          - !ImportValue givesource-primary-private-subnet
          - !ImportValue givesource-secondary-private-subnet

Outputs:

  AuthorizeUsers:
    Value: !Ref AuthorizeUsers

  CognitoCreateUserFunctionArn:
    Value: !GetAtt CognitoCreateUserFunction.Arn

  CognitoCustomMessageFunctionArn:
    Value: !GetAtt CognitoCustomMessageFunction.Arn

  CognitoUserPoolId:
    Value: !GetAtt CognitoUserPool.UserPoolId

  CognitoUserPoolClientId:
    Value: !GetAtt CognitoUserPoolClient.UserPoolClientId
