---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Custom resources for Givesource
Parameters:

  StackName:
    Type: String

  RestApi:
    Type: String

  LambdaRoleArn:
    Type: String

  DefaultLambdaFunctionTimeout:
    Type: Number

  CognitoSnsCallerRoleArn:
    Type: String

  S3HandleFunctionRoleArn:
    Type: String

  AdminPagesS3:
    Type: String

  AdminPagesCloudFrontDistribution:
    Type: String

  AdminPagesCloudFrontUrl:
    Type: String

  PublicPagesS3:
    Type: String

  PublicPagesCloudFrontDistribution:
    Type: String

  PublicPagesCloudFrontUrl:
    Type: String

  UploadsCloudFrontDistribution:
    Type: String

  UploadsS3:
    Type: String

  UploadsCloudFrontUrl:
    Type: String

Resources:

  # Api Gateway Authorizer Lambda Resources

  AuthorizeUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/AuthorizeUsers.zip
      Description: 'Cognito user authorizer'
      Environment:
        Variables:
          REGION: !Sub |-
            ${AWS::Region}
          USER_POOL_ID: !GetAtt CognitoUserPool.UserPoolId
      FunctionName: !Sub |-
        ${StackName}-AuthorizeUsers
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoUserPool

  AuthorizeUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizeUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/authorizers/${Authorizer}
        - Authorizer: !Ref AuthorizeUsers
    DependsOn:
      - AuthorizeUsersLambdaFunction
      - AuthorizeUsers

  # Api Gateway Authorizers

  AuthorizeUsers:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
        - Function: !GetAtt AuthorizeUsersLambdaFunction.Arn
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: AuthorizeUsers
      RestApiId: !Ref RestApi
    DependsOn: AuthorizeUsersLambdaFunction

  # CloudWatch Event Rules

  HourlyScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub |-
        ${StackName}-HourlyScheduledEvent
      Description: Event scheduled once an hour
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt DeleteReportsLambdaFunction.Arn
          Id: DeleteReportsScheduledJob
    DependsOn:
      - DeleteReportsLambdaFunction

  # Cognito User Pool Lambda Resources

  CognitoCreateUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPool.zip
      Description: "Create a user pool"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          COGNITO_CUSTOM_MESSAGE_FUNCTION_ARN: !GetAtt CognitoCustomMessageFunction.Arn
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPool
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CognitoCustomMessageFunction

  CognitoCreateUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserPoolClient.zip
      Description: "Create a user pool client"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserPoolClient
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUser.zip
      Description: "Create a user"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUser
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCreateUserGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCreateUserGroup.zip
      Description: "Create a user group"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CognitoCreateUserGroup
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCustomMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CognitoCustomMessage.zip
      Description: "Custom user verification message"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          ADMIN_PAGES_CLOUD_FRONT_URL: !Ref AdminPagesCloudFrontUrl
          EVENT_URL: !Ref PublicPagesCloudFrontUrl
          UPLOADS_CLOUD_FRONT_URL: !Ref UploadsCloudFrontUrl
      FunctionName: !Sub |-
        ${StackName}-CognitoCustomMessage
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CognitoCustomMessageLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoCustomMessageFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool.UserPoolId}
    DependsOn:
      - CognitoUserPool
      - CognitoCustomMessageFunction

  # Cognito User Pool Custom Resources

  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      PoolName: !Sub |-
        ${StackName}-Users
      SnsCallerArn: !Ref CognitoSnsCallerRoleArn
    DependsOn: CognitoCreateUserPoolFunction

  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserPoolClientFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      ClientName: "Browser"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
    DependsOn:
     - CognitoUserPool
     - CognitoCreateUserPoolClientFunction

  CognitoSuperAdminUserGroup:
    Type: Custom::CognitoSuperAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "SuperAdmin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoAdminUserGroup:
    Type: Custom::CognitoAdminUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Admin"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  CognitoNonprofitUserGroup:
    Type: Custom::CognitoNonprofitUserGroup
    Properties:
      ServiceToken: !GetAtt CognitoCreateUserGroupFunction.Arn
      GroupName: "Nonprofit"
      UserPoolId: !Sub |-
        ${CognitoUserPool.UserPoolId}
      RoleArn: !Ref LambdaRoleArn
    DependsOn:
      - CognitoUserPool
      - CognitoCreateUserGroupFunction

  # Generate Custom CSS for Frontend

  GenerateCustomFrontendCssLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateCustomFrontendCss.zip
      Description: "Generate custom css for the frontend"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          PUBLIC_PAGES_S3_BUCKET: !Ref PublicPagesS3
      FunctionName: !Sub |-
        ${StackName}-GenerateCustomFrontendCss
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Generate public index file

  GeneratePublicIndexFileLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GeneratePublicIndexFile.zip
      Description: "Generate index file for the public website"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          PUBLIC_PAGES_S3_BUCKET: !Ref PublicPagesS3
      FunctionName: !Sub |-
        ${StackName}-GeneratePublicIndexFile
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Generate dynamic content

  GenerateDynamicContentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateDynamicContent.zip
      Description: "Generate dynamic content for the public website"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          PUBLIC_PAGES_S3_BUCKET: !Ref PublicPagesS3
      FunctionName: !Sub |-
        ${StackName}-GenerateDynamicContent
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn:
      - GeneratePublicIndexFileLambdaFunction
      - GenerateCustomFrontendCssLambdaFunction

  # Lambda@Edge Function Resources

  CreateLambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*
      - PolicyName: CloudFront
        PolicyDocument:
          Statement:
            - Action:
              - cloudfront:GetDistributionConfig
              - cloudfront:UpdateDistribution
              Effect: Allow
              Resource: '*'
      - PolicyName: IAM
        PolicyDocument:
          Statement:
            - Action:
              - iam:GetRole
              - iam:PassRole
              Effect: Allow
              Resource: '*'
      - PolicyName: Lambda
        PolicyDocument:
          Statement:
            - Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:EnableReplication
              - lambda:GetFunction
              - lambda:PublishVersion
              - lambda:UpdateFunctionCode
              Effect: Allow
              Resource: !Sub |-
                arn:aws:lambda:us-east-1:${AWS::AccountId}:function:*
      - PolicyName: S3
        PolicyDocument:
          Statement:
            - Action:
              - s3:GetObject
              Effect: Allow
              Resource: !Sub |-
                arn:aws:s3:::{{awsLambdaReleaseBucketPrefix}}-${AWS::Region}/*

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*

  CreateLambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CreateLambdaEdgeFunction.zip
      Description: "Create an AWS Lambda@Edge function"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CreateLambdaEdgeFunction
      Handler: "index.handle"
      MemorySize: 128
      Role: !GetAtt CreateLambdaEdgeFunctionRole.Arn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout
    DependsOn: CreateLambdaEdgeFunctionRole

  # Report Lambda Resources

  GenerateReportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GenerateReport.zip
      Description: "Generate report"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          AWS_S3_BUCKET_NAME: !Ref UploadsS3
      FunctionName: !Sub |-
        ${StackName}-GenerateReport
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  DeleteReportsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/DeleteReports.zip
      Description: "Delete expired reports"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          AWS_S3_BUCKET_NAME: !Ref UploadsS3
      FunctionName: !Sub |-
        ${StackName}-DeleteReports
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  DeleteReportsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeleteReportsLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt HourlyScheduledEventRule.Arn
    DependsOn:
      - DeleteReportsLambdaFunction
      - HourlyScheduledEventRule

  # Save Settings Lambda Resources

  SaveSettingsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SaveSettings.zip
      Description: "Save stack settings"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SaveSettings
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # S3 Lambda Resources

  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3PutObject.zip
      Description: "Put an object into an AWS S3 bucket"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3PutObject
      Handler: "index.handle"
      Role: !Ref S3HandleFunctionRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/S3SyncObjects.zip
      Description: "Sync S3 objects between two AWS S3 buckets"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-S3SyncObjects
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  # Create Lambda@Edge Functions

  CreateSecurityHeadersAdminPages:
    Type: Custom::LambdaEdgeSecurityHeaders
    Properties:
      ServiceToken: !GetAtt CreateLambdaEdgeFunction.Arn
      CloudFrontDistribution: !Ref AdminPagesCloudFrontDistribution
      EventType: origin-response
      FunctionName: SecurityHeadersAdminPages
      Code: !Sub |-
         exports.handle = function (event, context, callback) {

         	//Get contents of response
         	const response = event.Records[0].cf.response;
         	const headers = response.headers;

         	//Set new headers
         	headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000;includeSubdomains;preload'}];
         	headers['content-security-policy'] = [{
                key: 'Content-Security-Policy',
                value: "default-src 'none'; " +
                "base-uri 'none'; " +
                "connect-src 'self' https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com https://cognito-idp.us-west-2.amazonaws.com https://vimeo.com; " +
                "font-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com https://use.fontawesome.com; " +
                "form-action 'self'; " +
                "frame-ancestors 'self'; " +
                "frame-src 'self' https://www.youtube.com https://player.vimeo.com; " +
                "img-src 'self' www.google-analytics.com https://www.gravatar.com ${UploadsCloudFrontUrl} https://img.youtube.com; " +
                "script-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://use.fontawesome.com https://cdnjs.cloudflare.com; " +
                "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://use.fontawesome.com https://cdnjs.cloudflare.com; " +
                "object-src 'none'"
         	}];
         	headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
         	headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
         	headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
         	headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

         	//Return modified response
         	callback(null, response);
         };
      Role: !GetAtt LambdaEdgeRole.Arn
    DependsOn:
      - CreateLambdaEdgeFunction
      - LambdaEdgeRole

  CreateSecurityHeadersPublicPages:
    Type: Custom::LambdaEdgeSecurityHeaders
    Properties:
      ServiceToken: !GetAtt CreateLambdaEdgeFunction.Arn
      CloudFrontDistribution: !Ref PublicPagesCloudFrontDistribution
      EventType: origin-response
      FunctionName: SecurityHeadersPublicPages
      Code: !Sub |-
         exports.handle = function (event, context, callback) {
         	//Get contents of response
         	const response = event.Records[0].cf.response;
         	const headers = response.headers;

         	//Set new headers
         	headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000;includeSubdomains;preload'}];
         	headers['content-security-policy'] = [{
                key: 'Content-Security-Policy',
                value: "default-src 'none'; " +
                "base-uri 'none'; " +
                "connect-src 'self' https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com https://cognito-idp.us-west-2.amazonaws.com; " +
                "font-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com https://use.fontawesome.com; " +
                "form-action 'self'; " +
                "frame-ancestors 'self'; " +
                "frame-src 'self' https://www.youtube.com https://player.vimeo.com; " +
                "img-src 'self' www.google-analytics.com ${UploadsCloudFrontUrl}; " +
                "script-src 'self' 'unsafe-inline' https://www.google-analytics.com https://fonts.googleapis.com https://use.fontawesome.com https://cdnjs.cloudflare.com; " +
                "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; " +
                "object-src 'none'"
         	}];
         	headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
         	headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
         	headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
         	headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

         	//Return modified response
         	callback(null, response);
         };
      Role: !GetAtt LambdaEdgeRole.Arn
    DependsOn:
      - CreateLambdaEdgeFunction
      - LambdaEdgeRole

  CreateSecurityHeadersUploads:
    Type: Custom::LambdaEdgeSecurityHeaders
    Properties:
      ServiceToken: !GetAtt CreateLambdaEdgeFunction.Arn
      CloudFrontDistribution: !Ref UploadsCloudFrontDistribution
      EventType: origin-response
      FunctionName: SecurityHeadersUploads
      Code: !Sub |-
        exports.handle = function (event, context, callback) {

        	//Get contents of response
        	const response = event.Records[0].cf.response;
        	const headers = response.headers;

        	//Set new headers
        	headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000;includeSubdomains;preload'}];
        	headers['content-security-policy'] = [{
        		key: 'Content-Security-Policy',
        		value: "default-src 'none'; img-src 'self'; script-src 'none'; font-src 'self'; style-src 'self'; object-src 'none';"
        	}];
        	headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
        	headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
        	headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
        	headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

        	//Return modified response
        	callback(null, response);
        };
      Role: !GetAtt LambdaEdgeRole.Arn
    DependsOn:
      - CreateLambdaEdgeFunction
      - LambdaEdgeRole

  # S3 Admin Pages Deployment

  AdminPagesSettingsJson:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket: !Ref AdminPagesS3
      Key: "settings.json"
      Body: !Sub |-
        {
          "API_URL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
        }
    DependsOn:
      - S3PutObjectFunction
      - CognitoUserPool
      - CognitoUserPoolClient

  AdminPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: admin-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref AdminPagesS3
    DependsOn: S3SyncObjectsFunction

  # S3 Public Pages Deployment

  PublicPagesDynamicContentDeploy:
    Type: Custom::DynamicContent
    Properties:
      ServiceToken: !GetAtt GenerateDynamicContentLambdaFunction.Arn
    DependsOn:
      - GenerateDynamicContentLambdaFunction
      - CognitoUserPool
      - CognitoUserPoolClient
      - SaveInitialStackSettings

  PublicPagesDeploy:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken: !GetAtt S3SyncObjectsFunction.Arn
      SourceBucket: {{awsReleaseBucket}}
      SourceKey: public-pages/{{version}}
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket: !Ref PublicPagesS3
    DependsOn: S3SyncObjectsFunction

  # Save Settings Custom Resources

  SaveInitialStackSettings:
    Type: Custom::Settings
    Properties:
      ServiceToken: !GetAtt SaveSettingsLambdaFunction.Arn
      Settings: !Sub |-
        {
          "API_URL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/",
          "ADMIN_URL": "${AdminPagesCloudFrontUrl}",
          "ADMIN_PAGES_CLOUD_FRONT_URL": "${AdminPagesCloudFrontUrl}",
          "ADMIN_PAGES_S3_BUCKET_NAME": "${AdminPagesS3}",
          "EVENT_URL": "${PublicPagesCloudFrontUrl}",
          "PUBLIC_PAGES_CLOUD_FRONT_URL": "${PublicPagesCloudFrontUrl}",
          "PUBLIC_PAGES_S3_BUCKET_NAME": "${PublicPagesS3}",
          "UPLOADS_CLOUD_FRONT_URL": "${UploadsCloudFrontUrl}",
          "UPLOADS_S3_BUCKET_NAME": "${UploadsS3}",
          "USER_POOL_CLIENT_ID": "${CognitoUserPoolClient.UserPoolClientId}",
          "USER_POOL_ID": "${CognitoUserPool.UserPoolId}",
          "PUBLIC_INDEX_TEMPLATE": {
            "type": "S3",
            "bucket": "{{awsReleaseBucket}}",
            "path": "public-pages/{{version}}/templates/index.mustache"
          }
        }
    DependsOn:
      - CognitoUserPool
      - CognitoUserPoolClient
      - SaveSettingsLambdaFunction

  # Send Email Lambda Resources

  SendDonationsReceiptEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendDonationsReceiptEmail.zip
      Description: "Send a donations receipt email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendDonationsReceiptEmail
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  SendContactMessageEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendContactMessageEmail.zip
      Description: "Send a contact message email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendContactMessageEmail
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  SendRegistrationPendingEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/SendRegistrationPendingEmail.zip
      Description: "Send a registration pending email"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-SendRegistrationPendingEmail
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

Outputs:

  AuthorizeUsers:
    Value: !Ref AuthorizeUsers

  CognitoCreateUserFunctionArn:
    Value: !GetAtt CognitoCreateUserFunction.Arn

  CognitoCustomMessageFunctionArn:
    Value: !GetAtt CognitoCustomMessageFunction.Arn

  CognitoUserPoolId:
    Value: !GetAtt CognitoUserPool.UserPoolId

  CognitoUserPoolClientId:
    Value: !GetAtt CognitoUserPoolClient.UserPoolClientId