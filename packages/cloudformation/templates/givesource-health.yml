---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Health Check resources for Givesource
Parameters:

  StackName:
    Type: String

  HealthCheck:
    Type: String

  HealthCheckRootResourceId:
    Type: String

  LambdaRoleArn:
    Type: String

  DefaultLambdaFunctionTimeout:
    Type: Number

  IntegrationRequestTemplate:
    Type: String
    Default: |
     {
      "body":$input.json('$'),
      "headers":{
        #foreach($param in $input.params().header.keySet())
        "$param": "$util.escapeJavaScript($input.params().header.get($param))"
        #if($foreach.hasNext),#end
        #end
      },
      "method": "$context.httpMethod",
      "params":{
        #foreach($param in $input.params().path.keySet())
        "$param": "$util.escapeJavaScript($input.params().path.get($param))"
        #if($foreach.hasNext),#end
        #end
      },
      "query":{
        #foreach($param in $input.params().querystring.keySet())
        "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
        #if($foreach.hasNext),#end
        #end
      }
     }

  IntegrationResponsesTemplate:
    Type: String
    Default: |
      #set ($errorObj = $util.parseJson($input.path('$.errorMessage')))
      {
        "errors" : {
          "type" : "$errorObj.type",
          "message" : "$errorObj.message",
          "request_id" : "$errorObj.requestId"
        }
      }

Resources:

  CloudSearchHealthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/CloudSearchHealth.zip
      Description: "Check the health of CloudSearch domains"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-CloudSearchHealth
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  CloudSearchHealthLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CloudSearchHealthLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HealthCheck}/*/GET/cloudsearch
    DependsOn: CloudSearchHealthLambdaFunction

  HealthDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref HealthCheck
      StageName: "health"
    DependsOn:
      - CloudSearchHealthResource
      - CloudSearchHealthMethod

  CloudSearchHealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HealthCheck
      ParentId: !Ref HealthCheckRootResourceId
      PathPart: "cloudsearch"

  CloudSearchHealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref HealthCheck
      ResourceId: !Ref CloudSearchHealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: !Ref IntegrationRequestTemplate
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt CloudSearchHealthLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":400.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: CloudSearchHealthLambdaInvokePermission

  HealthCheckDeployLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/HealthCheckDeploy.zip
      Description: "Deploy the health api"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-HealthCheckDeploy
      Handler: "index.handle"
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  HealthDeploy:
    Type: Custom::ApiGatewayDeploy
    Properties:
      ServiceToken: !GetAtt HealthCheckDeployLambdaFunction.Arn
      RestApiId: !Ref HealthCheck
      StageName: "health"
      Version: {{version}}
    DependsOn:
      - HealthCheckDeployLambdaFunction
      - HealthDeployment