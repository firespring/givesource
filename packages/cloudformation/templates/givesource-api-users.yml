---
AWSTemplateFormatVersion: 2010-09-09
Description: Users API resources for Givesource
Parameters:

  StackName:
    Type: String

  LambdaRoleArn:
    Type: String

  DefaultLambdaFunctionTimeout:
    Type: Number

  RestApi:
    Type: String

  RestApiRootResourceId:
    Type: String

  UserPoolId:
    Type: String

  AuthorizeUsers:
    Type: String

  IntegrationRequestTemplate:
    Type: String
    Default: |
      #if($context.authorizer.user && "$context.authorizer.user" != "")
        #set($user = "$context.authorizer.user")
      #else
        #set($user = 'null')
      #end
      {
        "body":$input.json('$'),
        "headers":{
          #foreach($param in $input.params().header.keySet())
          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
          #if($foreach.hasNext),#end
          #end
        },
        "method": "$context.httpMethod",
        "params":{
          #foreach($param in $input.params().path.keySet())
          "$param": "$util.escapeJavaScript($input.params().path.get($param))"
          #if($foreach.hasNext),#end
          #end
        },
        "query":{
          #foreach($param in $input.params().querystring.keySet())
          "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
          #if($foreach.hasNext),#end
          #end
        },
        "user": $user
      }

  IntegrationResponsesTemplate:
    Type: String
    Default: |
      #set ($errorObj = $util.parseJson($input.path('$.errorMessage')))
      {
        "errors" : {
          "type" : "$errorObj.type",
          "message" : "$errorObj.message",
          "request_id" : "$errorObj.requestId"
        }
      }

  SuccessResponseTemplate:
    Type: String
    Default: |
      {
        "statusCode": 200
      }

Resources:

  # User Profile Lambda Resources

  GetUserProfileLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GetUserProfile.zip
      Description: "Get authenticated user's profile"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-GetUserProfile
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  GetUserProfileLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetUserProfileLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/user-profile
    DependsOn: GetUserProfileLambdaFunction

  # Users Lambda Resources

  GetUsersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/GetUsers.zip
      Description: "Get all admin users"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-GetUsers
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  GetUsersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetUsersLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/users
    DependsOn: GetUsersLambdaFunction

  PostUserLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/PostUser.zip
      Description: "Create a new user"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
          USER_POOL_ID: !Ref UserPoolId
      FunctionName: !Sub |-
        ${StackName}-PostUser
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: 30

  PostUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostUserLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/users
    DependsOn: PostUserLambdaFunction

  PatchUserLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          {{awsLambdaReleaseBucketPrefix}}-${AWS::Region}
        S3Key: fn/{{version}}/PatchUser.zip
      Description: "Update an existing user"
      Environment:
        Variables:
          AWS_STACK_NAME: !Ref StackName
      FunctionName: !Sub |-
        ${StackName}-PatchUser
      Handler: "index.handle"
      MemorySize: 128
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs6.10"
      Timeout: !Ref DefaultLambdaFunctionTimeout

  PatchUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PatchUserLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/users/{user_uuid}
    DependsOn: PatchUserLambdaFunction

  # User Profile Api Gateway Resources

  UserProfileApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref RestApiRootResourceId
      PathPart: "user-profile"

  GetUserProfileApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UserProfileApiResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizeUsers
      ApiKeyRequired: false
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: !Ref IntegrationRequestTemplate
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt GetUserProfileLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":400.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":401.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 403
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":403.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":404.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":500.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: GetUserProfileLambdaFunction

  OptionsUserProfileApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UserProfileApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: !Ref SuccessResponseTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Users Api Gateway Resources

  UsersApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref RestApiRootResourceId
      PathPart: "users"

  UserApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersApiResource
      PathPart: "{user_uuid}"

  GetUsersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersApiResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizeUsers
      ApiKeyRequired: false
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: !Ref IntegrationRequestTemplate
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt GetUsersLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":400.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":401.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 403
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":403.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":404.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":500.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: GetUsersLambdaFunction

  PostUserApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersApiResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizeUsers
      ApiKeyRequired: false
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: !Ref IntegrationRequestTemplate
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt PostUserLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 201
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":400.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":401.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 403
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":403.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":404.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":500.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
      MethodResponses:
        - StatusCode: 201
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: PostUserLambdaFunction

  PatchUserApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UserApiResource
      HttpMethod: PATCH
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizeUsers
      ApiKeyRequired: false
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: !Ref IntegrationRequestTemplate
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt PatchUserLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":400.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":401.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 403
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":403.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":404.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: .*"httpStatus":500.*
            ResponseTemplates:
              application/json: !Ref IntegrationResponsesTemplate
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: PatchUserLambdaFunction

  OptionsUsersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UsersApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: !Ref SuccessResponseTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  OptionsUserApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref UserApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: !Ref SuccessResponseTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true